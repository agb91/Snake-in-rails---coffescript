I"å(function() {
  var clean, color, direzione, downkey, draw, forward, forwardDown, forwardLeft, forwardRight, forwardUp, keyb, leftkey, rightkey, serpente, time, upkey;

  serpente = ['4-7', '4-6', '4-5', '4-4'];

  time = 1000;

  direzione = 'right';

  window.addEventListener("keydown", (function(_this) {
    return function(e) {
      return keyb(e.keyCode);
    };
  })(this));

  keyb = function(i) {
    if (i === 38) {
      upkey();
    }
    if (i === 40) {
      downkey();
    }
    if (i === 39) {
      rightkey();
    }
    if (i === 37) {
      return leftkey();
    }
  };

  upkey = function() {
    return direzione = 'up';
  };

  downkey = function() {
    return direzione = 'down';
  };

  rightkey = function() {
    return direzione = 'right';
  };

  leftkey = function() {
    return direzione = 'left';
  };

  color = function(col, id) {
    var cid;
    cid = '#' + id;
    return $('#' + id).css('background-color', col);
  };

  window.avvia = function() {
    draw();
    return setInterval(forward, time);
  };

  forwardRight = function(vecchia) {
    var id;
    return id = vecchia.split('-')[0] + '-' + parseInt(parseInt(vecchia.split('-')[1]) + 1);
  };

  forwardLeft = function(vecchia) {
    var id;
    return id = vecchia.split('-')[0] + '-' + parseInt(parseInt(vecchia.split('-')[1]) - 1);
  };

  forwardUp = function(vecchia) {
    var id;
    return id = parseInt(parseInt(vecchia.split('-')[0]) - 1) + '-' + vecchia.split('-')[1];
  };

  forwardDown = function(vecchia) {
    var id;
    return id = parseInt(parseInt(vecchia.split('-')[0]) + 1) + '-' + vecchia.split('-')[1];
  };

  forward = function() {
    var dim, i, j, k, l, len, len1, m, nuovatesta, results, results1, ri, ro, serpenteNew, vecchiaTesta;
    serpenteNew = [];
    dim = serpente.length;
    vecchiaTesta = serpente[0];
    if (direzione === 'right') {
      nuovatesta = forwardRight(vecchiatesta);
    }
    if (direzione === 'left') {
      nuovatesta = forwardLeft(vecchiatesta);
    }
    if (direzione === 'up') {
      nuovatesta = forwardUp(vecchiatesta);
    }
    if (direzione === 'down') {
      nuovatesta = forwardDown(vecchiatesta);
    }
    serpenteNew[0] = nuovatesta;
    ro = (function() {
      results = [];
      for (var j = 1; 1 <= dim ? j <= dim : j >= dim; 1 <= dim ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this);
    ri = (function() {
      results1 = [];
      for (var k = 0; 0 <= dim ? k <= dim : k >= dim; 0 <= dim ? k++ : k--){ results1.push(k); }
      return results1;
    }).apply(this);
    for (l = 0, len = ro.length; l < len; l++) {
      i = ro[l];
      serpenteNew[i] = serpente[i - 1];
    }
    for (m = 0, len1 = ri.length; m < len1; m++) {
      i = ri[m];
      serpente[i] = serpenteNew[i];
    }
    return draw();
  };

  clean = function() {
    var a, i, id, j, k, l, len, ra, results, results1, results2, ri;
    ri = (function() {
      results = [];
      for (j = 0; j <= 64; j++){ results.push(j); }
      return results;
    }).apply(this);
    ra = (function() {
      results1 = [];
      for (k = 0; k <= 64; k++){ results1.push(k); }
      return results1;
    }).apply(this);
    results2 = [];
    for (l = 0, len = ri.length; l < len; l++) {
      i = ri[l];
      results2.push((function() {
        var len1, m, results3;
        results3 = [];
        for (m = 0, len1 = ra.length; m < len1; m++) {
          a = ra[m];
          id = i + "-" + a;
          results3.push(color('yellow', id));
        }
        return results3;
      })());
    }
    return results2;
  };

  draw = function() {
    var i, j, k, len, ref, results, results1, rs;
    clean();
    rs = (function() {
      results = [];
      for (var j = 0, ref = serpente.length; 0 <= ref ? j <= ref : j >= ref; 0 <= ref ? j++ : j--){ results.push(j); }
      return results;
    }).apply(this);
    results1 = [];
    for (k = 0, len = rs.length; k < len; k++) {
      i = rs[k];
      results1.push(color('black', serpente[i]));
    }
    return results1;
  };

}).call(this);
:ET